<pre>/**
 * This class is an implemenatation class for all the rest services
 */
Class [ 
    <user> class SugarWebServiceImplv4 extends SugarWebServiceImplv3_1 ] {
  

  - Constants [0] {
  }

  - Static properties [1] {
    Property [ public static $helperObject ]
  }

  - Static methods [0] {
  }

  - Properties [0] {
  }

  - Methods [35] {
    Method [ 
        <user, overwrites SugarWebServiceImplv3_1, ctor> public method __construct ] {
      
    }

    /**
     * Log the user into the application
     *
     * @param UserAuth array $user_auth -- Set user_name and password (password needs to be
     *      in the right encoding for the type of authentication the user is setup for.  For Base
     *      sugar validation, password is the MD5 sum of the plain text password.
     * @param String $application -- The name of the application you are logging in from.  (Currently unused).
     * @param array $name_value_list -- Array of name value pair of extra parameters. As of today only 'language' and 'notifyonsave' is supported
     * @return Array - id - String id is the session_id of the session that was created.
     *               - module_name - String - module name of user
     *               - name_value_list - Array - The name value pair of user_id, user_name, user_language, user_currency_id, user_currency_name,
     *                                         - user_default_team_id, user_is_admin, user_default_dateformat, user_default_timeformat
     * @exception 'SoapFault' -- The SOAP error, if any
     */
    Method [ 
            <user, overwrites SugarWebServiceImplv3_1, prototype SugarWebServiceImpl> public method login ] {
      

      - Parameters [3] {
        Parameter #0 [ <required> $user_auth ]
        Parameter #1 [ <required> $application ]
        Parameter #2 [ <optional> $name_value_list = Array ]
      }
    }

    /**
     * Retrieve a list of SugarBean's based on provided IDs. This API will not wotk with report module
     *
     * @param String $session -- Session ID returned by a previous call to login.
     * @param String $module_name -- The name of the module to return records from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
     * @param Array $ids -- An array of SugarBean IDs.
     * @param Array $select_fields -- A list of the fields to be included in the results. This optional parameter allows for only needed fields to be retrieved.
     * @param Array $link_name_to_fields_array -- A list of link_names and for each link_name, what fields value to be returned. For ex.'link_name_to_fields_array' => array(array('name' =>  'email_addresses', 'value' => array('id', 'email_address', 'opt_out', 'primary_address')))
     * @return Array
     *        'entry_list' -- Array - The records name value pair for the simple data types excluding link field data.
     *       'relationship_list' -- Array - The records link field data. The example is if asked about accounts email address then return data would look like Array ( [0] => Array ( [name] => email_addresses [records] => Array ( [0] => Array ( [0] => Array ( [name] => id [value] => 3fb16797-8d90-0a94-ac12-490b63a6be67 ) [1] => Array ( [name] => email_address [value] => hr.kid.qa@example.com ) [2] => Array ( [name] => opt_out [value] => 0 ) [3] => Array ( [name] => primary_address [value] => 1 ) ) [1] => Array ( [0] => Array ( [name] => id [value] => 403f8da1-214b-6a88-9cef-490b63d43566 ) [1] => Array ( [name] => email_address [value] => kid.hr@example.name ) [2] => Array ( [name] => opt_out [value] => 0 ) [3] => Array ( [name] => primary_address [value] => 0 ) ) ) ) )
     * @exception 'SoapFault' -- The SOAP error, if any
     */
    Method [ 
        <user, overwrites SugarWebServiceImplv3_1, prototype SugarWebServiceImpl> public method get_entries ] {

      - Parameters [5] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $module_name ]
        Parameter #2 [ <required> $ids ]
        Parameter #3 [ <required> $select_fields ]
        Parameter #4 [ <required> $link_name_to_fields_array ]
      }
    }

    /**
     * Retrieve a list of beans.  This is the primary method for getting list of SugarBeans from Sugar using the SOAP API.
     *
     * @param String $session -- Session ID returned by a previous call to login.
     * @param String $module_name -- The name of the module to return records from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
     * @param String $query -- SQL where clause without the word 'where'
     * @param String $order_by -- SQL order by clause without the phrase 'order by'
     * @param integer $offset -- The record offset to start from.
     * @param Array  $select_fields -- A list of the fields to be included in the results. This optional parameter allows for only needed fields to be retrieved.
     * @param Array $link_name_to_fields_array -- A list of link_names and for each link_name, what fields value to be returned. For ex.'link_name_to_fields_array' => array(array('name' =>  'email_addresses', 'value' => array('id', 'email_address', 'opt_out', 'primary_address')))
    * @param integer $max_results -- The maximum number of records to return.  The default is the sugar configuration value for 'list_max_entries_per_page'
     * @param integer $deleted -- false if deleted records should not be include, true if deleted records should be included.
     * @return Array 'result_count' -- integer - The number of records returned
     *               'next_offset' -- integer - The start of the next page (This will always be the previous offset plus the number of rows returned.  It does not indicate if there is additional data unless you calculate that the next_offset happens to be closer than it should be.
     *               'entry_list' -- Array - The records that were retrieved
     *               'relationship_list' -- Array - The records link field data. The example is if asked about accounts email address then return data would look like Array ( [0] => Array ( [name] => email_addresses [records] => Array ( [0] => Array ( [0] => Array ( [name] => id [value] => 3fb16797-8d90-0a94-ac12-490b63a6be67 ) [1] => Array ( [name] => email_address [value] => hr.kid.qa@example.com ) [2] => Array ( [name] => opt_out [value] => 0 ) [3] => Array ( [name] => primary_address [value] => 1 ) ) [1] => Array ( [0] => Array ( [name] => id [value] => 403f8da1-214b-6a88-9cef-490b63d43566 ) [1] => Array ( [name] => email_address [value] => kid.hr@example.name ) [2] => Array ( [name] => opt_out [value] => 0 ) [3] => Array ( [name] => primary_address [value] => 0 ) ) ) ) )
    * @exception 'SoapFault' -- The SOAP error, if any
    */
    Method [ 
        <user, overwrites SugarWebServiceImplv3_1, prototype SugarWebServiceImpl> public method get_entry_list ] {
      

      - Parameters [10] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $module_name ]
        Parameter #2 [ <required> $query ]
        Parameter #3 [ <required> $order_by ]
        Parameter #4 [ <required> $offset ]
        Parameter #5 [ <required> $select_fields ]
        Parameter #6 [ <required> $link_name_to_fields_array ]
        Parameter #7 [ <required> $max_results ]
        Parameter #8 [ <required> $deleted ]
        Parameter #9 [ <optional> $favorites = false ]
      }
    }

    /**
     * Retrieve the layout metadata for a given module given a specific type and view.
     *
     * @param String $session -- Session ID returned by a previous call to login.
     * @param array $module_name(s) -- The name of the module(s) to return records from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
     * @return array $type The type(s) of views requested.  Current supported types are 'default' (for application) and 'wireless'
     * @return array $view The view(s) requested.  Current supported types are edit, detail, list, and subpanel.
     * @exception 'SoapFault' -- The SOAP error, if any
     */
    Method [ 
        <user, overwrites SugarWebServiceImplv3_1, prototype SugarWebServiceImplv3> public method get_module_layout ] {
      

      - Parameters [6] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $a_module_names ]
        Parameter #2 [ <required> $a_type ]
        Parameter #3 [ <required> $a_view ]
        Parameter #4 [ <optional> $acl_check = true ]
        Parameter #5 [ <optional> $md5 = false ]
      }
    }

    /**
     * Given a list of modules to search and a search string, return the id, module_name, along with the fields
     * We will support Accounts, Bug Tracker, Cases, Contacts, Leads, Opportunities, Project, ProjectTask, Quotes
     *
     * @param string $session           - Session ID returned by a previous call to login.
     * @param string $search_string     - string to search
     * @param string[] $modules         - array of modules to query
     * @param int $offset               - a specified offset in the query
     * @param int $max_results          - max number of records to return
     * @param string $assigned_user_id  - a user id to filter all records by, leave empty to exclude the filter
     * @param string[] $select_fields   - An array of fields to return.  If empty the default return fields will be from the active list view defs.
     * @param bool $unified_search_only - A boolean indicating if we should only search against those modules participating in the unified search.
     * @param bool $favorites           - A boolean indicating if we should only search against records marked as favorites.
     * @return Array return_search_result   - Array('Accounts' => array(array('name' => 'first_name', 'value' => 'John', 'name' => 'last_name', 'value' => 'Do')))
     * @exception 'SoapFault' -- The SOAP error, if any
     */
    Method [ <user, overwrites SugarWebServiceImplv3_1, prototype SugarWebServiceImpl> public method search_by_module ] {
    - Parameters [9] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $search_string ]
        Parameter #2 [ <required> $modules ]
        Parameter #3 [ <required> $offset ]
        Parameter #4 [ <required> $max_results ]
        Parameter #5 [ <optional> $assigned_user_id = '' ]
        Parameter #6 [ <optional> $select_fields = Array ]
        Parameter #7 [ <optional> $unified_search_only = true ]
        Parameter #8 [ <optional> $favorites = false ]
      }
    }

    /**
     * Get OAuth reqtest token
     */
    Method [ <user> public method oauth_request_token ] {
      
    }

    /**
     * Get OAuth access token
     */
    Method [ <user> public method oauth_access_token ] {
      
    }

    Method [ <user> public method oauth_access ] {
      

      - Parameters [1] {
        Parameter #0 [ <optional> $session = '' ]
      }
    }

    /**
     * Get next job from the queue
     * @param string $session
     * @param string $clientid
     */
    Method [ <user> public method job_queue_next ] {
      

      - Parameters [2] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $clientid ]
      }
    }

    /**
     * Run cleanup and schedule
     * @param string $session
     * @param string $clientid
     */
    Method [ <user> public method job_queue_cycle ] {
      
      - Parameters [2] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $clientid ]
      }
    }

    /**
     * Run job from queue
     * @param string $session
     * @param string $jobid
     * @param string $clientid
     */
    Method [ <user> public method job_queue_run ] {
      - Parameters [3] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $jobid ]
        Parameter #2 [ <required> $clientid ]
      }
    }

    /**
    * Retrieve a single SugarBean based on ID.
    *
    * @param String $session -- Session ID returned by a previous call to login.
    * @param String $module_name -- The name of the module to return records from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
    * @param String $id -- The SugarBean's ID value.
    * @param Array  $select_fields -- A list of the fields to be included in the results. This optional parameter allows for only needed fields to be retrieved.
    * @param Array $link_name_to_fields_array -- A list of link_names and for each link_name, what fields value to be returned. For ex.'link_name_to_fields_array' => array(array('name' =>  'email_addresses', 'value' => array('id', 'email_address', 'opt_out', 'primary_address')))
    * @param bool $trackView -- Should we track the record accessed.
    * @return Array
    *        'entry_list' -- Array - The records name value pair for the simple data types excluding link field data.
    *        'relationship_list' -- Array - The records link field data. The example is if asked about accounts email address then return data would look like Array ( [0] => Array ( [name] => email_addresses [records] => Array ( [0] => Array ( [0] => Array ( [name] => id [value] => 3fb16797-8d90-0a94-ac12-490b63a6be67 ) [1] => Array ( [name] => email_address [value] => hr.kid.qa@example.com ) [2] => Array ( [name] => opt_out [value] => 0 ) [3] => Array ( [name] => primary_address [value] => 1 ) ) [1] => Array ( [0] => Array ( [name] => id [value] => 403f8da1-214b-6a88-9cef-490b63d43566 ) [1] => Array ( [name] => email_address [value] => kid.hr@example.name ) [2] => Array ( [name] => opt_out [value] => 0 ) [3] => Array ( [name] => primary_address [value] => 0 ) ) ) ) )
    * @exception 'SoapFault' -- The SOAP error, if any
    */
    Method [ <user, inherits SugarWebServiceImplv3_1, prototype SugarWebServiceImpl> public method get_entry ] {
      

      - Parameters [6] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $module_name ]
        Parameter #2 [ <required> $id ]
        Parameter #3 [ <required> $select_fields ]
        Parameter #4 [ <required> $link_name_to_fields_array ]
        Parameter #5 [ <optional> $track_view = false ]
      }
    }

    /**
     * Retrieve the md5 hash of the vardef entries for a particular module.
     *
     * @param String $session -- Session ID returned by a previous call to login.
     * @param String $module_name -- The name of the module to return records from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
     * @return String The md5 hash of the vardef definition.
     * @exception 'SoapFault' -- The SOAP error, if any
     */
    Method [ <user, inherits SugarWebServiceImplv3_1, prototype SugarWebServiceImplv3> public method get_module_fields_md5 ] {
      

      - Parameters [2] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $module_name ]
      }
    }

    /**
     * Retrieve the md5 hash of a layout metadata for a given module given a specific type and view.
     *
     * @param String $session -- Session ID returned by a previous call to login.
     * @param array $module_name(s) -- The name of the module to return records from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
     * @return array $type(s) The type of view requested.  Current supported types are 'default' (for application) and 'wireless'
     * @return array $view(s) The view requested.  Current supported types are edit, detail, and list.
     * @exception 'SoapFault' -- The SOAP error, if any
     */
    Method [ <user, inherits SugarWebServiceImplv3_1, prototype SugarWebServiceImplv3> public method get_module_layout_md5 ] {
      

      - Parameters [5] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $module_name ]
        Parameter #2 [ <required> $type ]
        Parameter #3 [ <required> $view ]
        Parameter #4 [ <optional> $acl_check = true ]
      }
    }

    /**
     * Update or create a single SugarBean.
     *
     * @param String $session -- Session ID returned by a previous call to login.
     * @param String $module_name -- The name of the module to return records from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
     * @param Array $name_value_list -- The keys of the array are the SugarBean attributes, the values of the array are the values the attributes should have.
     * @param Bool $track_view -- Should the tracker be notified that the action was performed on the bean.
     * @return Array    'id' -- the ID of the bean that was written to (-1 on error)
     * @exception 'SoapFault' -- The SOAP error, if any
     */
    Method [ <user, inherits SugarWebServiceImplv3_1, prototype SugarWebServiceImpl> public method set_entry ] {
      

      - Parameters [4] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $module_name ]
        Parameter #2 [ <required> $name_value_list ]
        Parameter #3 [ <optional> $track_view = false ]
      }
    }

    /**
     * Retrieve the list of available modules on the system available to the currently logged in user.
     *
     * @param String $session -- Session ID returned by a previous call to login.
     * @param String $filter --  Valid values are: all     - Return all modules,
     *                                             default - Return all visible modules for the application
     *                                             mobile  - Return all visible modules for the mobile view
     * @return Array    'modules' -- Array - An array of module names
     * @exception 'SoapFault' -- The SOAP error, if any
     */
    Method [ <user, inherits SugarWebServiceImplv3_1, prototype SugarWebServiceImpl> public method get_available_modules ] {
      

      - Parameters [2] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <optional> $filter = 'all' ]
      }
    }

    /**
     * Enter description here...
     *
     * @param string $session   - Session ID returned by a previous call to login.
     * @param array $modules Array of modules to return
     * @param bool $MD5 Should the results be md5d
     */
    Method [ <user, inherits SugarWebServiceImplv3_1> public method get_language_definition ] {
      

      - Parameters [3] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $modules ]
        Parameter #2 [ <optional> $MD5 = false ]
      }
    }

    /**
     * Gets server info. This will return information like version, flavor and gmt_time.
     * @return Array - flavor - String - Retrieve the specific flavor of sugar.
     *               - version - String - Retrieve the version number of Sugar that the server is running.
     *               - gmt_time - String - Return the current time on the server in the format 'Y-m-d H:i:s'. This time is in GMT.
     * @exception 'SoapFault' -- The SOAP error, if any
     */
    Method [ <user, inherits SugarWebServiceImplv3, prototype SugarWebServiceImpl> public method get_server_info ] {      
    }

    /**
     * Retrieve a list of recently viewed records by module.
     *
     * @param String $session -- Session ID returned by a previous call to login.
     * @param String $modules -- An array of modules or 'Home' to indicate all.
     * @return Array The recently viewed records
     * @exception 'SoapFault' -- The SOAP error, if any
     */
    Method [ <user, inherits SugarWebServiceImplv3> public method get_last_viewed ] {
      

      - Parameters [2] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $module_names ]
      }
    }

    /**
     * Retrieve a list of upcoming activities including Calls, Meetings,Tasks and Opportunities
     *
     * @param String $session -- Session ID returned by a previous call to login.
     * @return Array List of upcoming activities
     * @exception 'SoapFault' -- The SOAP error, if any
     */
    Method [ <user, inherits SugarWebServiceImplv3> public method get_upcoming_activities ] {
      

      - Parameters [1] {
        Parameter #0 [ <required> $session ]
      }
    }

    /**
     * Retrieve a collection of beans that are related to the specified bean and optionally return relationship data for those related beans.
     * So in this API you can get contacts info for an account and also return all those contact's email address or an opportunity info also.
     *
     * @param String $session -- Session ID returned by a previous call to login.
     * @param String $module_name -- The name of the module that the primary record is from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
     * @param String $module_id -- The ID of the bean in the specified module
     * @param String $link_field_name -- The name of the lnk field to return records from.  This name should be the name the relationship.
     * @param String $related_module_query -- A portion of the where clause of the SQL statement to find the related items.  The SQL query will already be filtered to only include the beans that are related to the specified bean.
     * @param Array $related_fields - Array of related bean fields to be returned.
     * @param Array $related_module_link_name_to_fields_array - For every related bean returrned, specify link fields name to fields info for that bean to be returned. For ex.'link_name_to_fields_array' => array(array('name' =>  'email_addresses', 'value' => array('id', 'email_address', 'opt_out', 'primary_address'))).
     * @param Number $deleted -- false if deleted records should not be include, true if deleted records should be included.
     * @param String $order_by -- field to order the result sets by
     * @return Array 'entry_list' -- Array - The records that were retrieved
     *               'relationship_list' -- Array - The records link field data. The example is if asked about accounts contacts email address then return data would look like Array ( [0] => Array ( [name] => email_addresses [records] => Array ( [0] => Array ( [0] => Array ( [name] => id [value] => 3fb16797-8d90-0a94-ac12-490b63a6be67 ) [1] => Array ( [name] => email_address [value] => hr.kid.qa@example.com ) [2] => Array ( [name] => opt_out [value] => 0 ) [3] => Array ( [name] => primary_address [value] => 1 ) ) [1] => Array ( [0] => Array ( [name] => id [value] => 403f8da1-214b-6a88-9cef-490b63d43566 ) [1] => Array ( [name] => email_address [value] => kid.hr@example.name ) [2] => Array ( [name] => opt_out [value] => 0 ) [3] => Array ( [name] => primary_address [value] => 0 ) ) ) ) )
    * @exception 'SoapFault' -- The SOAP error, if any
    */
    Method [ <user, inherits SugarWebServiceImplv3, prototype SugarWebServiceImpl> public method get_relationships ] {

      - Parameters [9] {
        Parameter #0 [ <required> $session ]
        Parameter #1 [ <required> $module_name ]
        Parameter #2 [ <required> $module_id ]
        Parameter #3 [ <required> $link_field_name ]
        Parameter #4 [ <required> $related_module_query ]
        Parameter #5 [ <required> $related_fields ]
        Parameter #6 [ <required> $related_module_link_name_to_fields_array ]
        Parameter #7 [ <required> $deleted ]
        Parameter #8 [ <optional> $order_by = '' ]
      }
    }

    /**
 * Set a single relationship between two beans.  The items are related by module name and id.
 *
 * @param String $session -- Session ID returned by a previous call to login.
 * @param String $module_name -- name of the module that the primary record is from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
 * @param String $module_id - The ID of the bean in the specified module_name
 * @param String link_field_name -- name of the link field which relates to the other module for which the relationship needs to be generated.
 * @param array related_ids -- array of related record ids for which relationships needs to be generated
 * @param array $name_value_list -- The keys of the array are the SugarBean attributes, the values of the array are the values the attributes should have.
 * @param integer $delete -- Optional, if the value 0 or nothing is passed then it will add the relationship for related_ids and if 1 is passed, it will delete this relationship for related_ids
 * @return Array - created - integer - How many relationships has been created
 *               - failed - integer - How many relationsip creation failed
 *               - deleted - integer - How many relationships were deleted
 * @exception 'SoapFault' -- The SOAP error, if any
 */
    Method [ 

      - Parameters [7] {
        Parameter #0 [ Parameter #1 [ undefined<required> $module_name ]
        Parameter #2 [ undefined<required> $module_id ]
        Parameter #3 [ undefined<required> $link_field_name ]
        Parameter #4 [ undefined<required> $related_ids ]
        Parameter #5 [ undefined<required> $name_value_list ]
        Parameter #6 [ undefined<required> $delete ]
      }
    }

    /**
 * Set a single relationship between two beans.  The items are related by module name and id.
 *
 * @param String $session -- Session ID returned by a previous call to login.
 * @param array $module_names -- Array of the name of the module that the primary record is from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
 * @param array $module_ids - The array of ID of the bean in the specified module_name
 * @param array $link_field_names -- Array of the name of the link field which relates to the other module for which the relationships needs to be generated.
 * @param array $related_ids -- array of an array of related record ids for which relationships needs to be generated
 * @param array $name_value_lists -- Array of Array. The keys of the inner array are the SugarBean attributes, the values of the inner array are the values the attributes should have.
 * @param array int $delete_array -- Optional, array of 0 or 1. If the value 0 or nothing is passed then it will add the relationship for related_ids and if 1 is passed, it will delete this relationship for related_ids
 * @return Array - created - integer - How many relationships has been created
 *               - failed - integer - How many relationsip creation failed
 *               - deleted - integer - How many relationships were deleted
*
 * @exception 'SoapFault' -- The SOAP error, if any
*/
    Method [ undefined<user, inherits SugarWebServiceImpl> public method set_relationships ] {
      

      - Parameters [7] {
        Parameter #0 [ undefined<required> $session ]
        Parameter #1 [ undefined<required> $module_names ]
        Parameter #2 [ undefined<required> $module_ids ]
        Parameter #3 [ undefined<required> $link_field_names ]
        Parameter #4 [ undefined<required> $related_ids ]
        Parameter #5 [ undefined<required> $name_value_lists ]
        Parameter #6 [ undefined<required> $delete_array ]
      }
    }

    /**
 * Update or create a list of SugarBeans
 *
 * @param String $session -- Session ID returned by a previous call to login.
 * @param String $module_name -- The name of the module to return records from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
 * @param Array $name_value_lists -- Array of Bean specific Arrays where the keys of the array are the SugarBean attributes, the values of the array are the values the attributes should have.
 * @return Array    'ids' -- Array of the IDs of the beans that was written to (-1 on error)
 * @exception 'SoapFault' -- The SOAP error, if any
 */
    Method [ undefined<user, inherits SugarWebServiceImpl> public method set_entries ] {
      

      - Parameters [3] {
        Parameter #0 [ undefined<required> $session ]
        Parameter #1 [ undefined<required> $module_name ]
        Parameter #2 [ undefined<required> $name_value_lists ]
      }
    }

    /**
 * Log out of the session.  This will destroy the session and prevent other's from using it.
 *
 * @param String $session -- Session ID returned by a previous call to login.
 * @return Empty
 * @exception 'SoapFault' -- The SOAP error, if any
 */
    Method [ undefined<user, inherits SugarWebServiceImpl> public method logout ] {
      

      - Parameters [1] {
        Parameter #0 [ undefined<required> $session ]
      }
    }

    /**
 * Return the user_id of the user that is logged into the current session.
 *
 * @param String $session -- Session ID returned by a previous call to login.
 * @return String -- the User ID of the current session
 * @exception 'SoapFault' -- The SOAP error, if any
 */
    Method [ undefined<user, inherits SugarWebServiceImpl> public method get_user_id ] {
      

      - Parameters [1] {
        Parameter #0 [ undefined<required> $session ]
      }
    }

    /**
 * Retrieve vardef information on the fields of the specified bean.
 *
 * @param String $session -- Session ID returned by a previous call to login.
 * @param String $module_name -- The name of the module to return records from.  This name should be the name the module was developed under (changing a tab name is studio does not affect the name that should be passed into this method)..
 * @param Array $fields -- Optional, if passed then retrieve vardef information on these fields only.
 * @return Array    'module_fields' -- Array - The vardef information on the selected fields.
 *                  'link_fields' -- Array - The vardef information on the link fields
 * @exception 'SoapFault' -- The SOAP error, if any
 */
    Method [ undefined<user, inherits SugarWebServiceImpl> public method get_module_fields ] {
      

      - Parameters [3] {
        Parameter #0 [ undefined<required> $session ]
        Parameter #1 [ undefined<required> $module_name ]
        Parameter #2 [ undefined<optional> $fields = Array ]
      }
    }

    /**
 * Perform a seamless login. This is used internally during the sync process.
 *
 * @param String $session -- Session ID returned by a previous call to login.
 * @return 1 -- integer - if the session was authenticated
 * @return 0 -- integer - if the session could not be authenticated
 */
    Method [ undefined<user, inherits SugarWebServiceImpl> public method seamless_login ] {
      

      - Parameters [1] {
        Parameter #0 [ undefined<required> $session ]
      }
    }

    /**
 * Add or replace the attachment on a Note.
 * Optionally you can set the relationship of this note to Accounts/Contacts and so on by setting related_module_id, related_module_name
 *
 * @param String $session -- Session ID returned by a previous call to login.
 * @param Array 'note' -- Array String 'id' -- The ID of the Note containing the attachment
 *                              String 'filename' -- The file name of the attachment
 *                              Binary 'file' -- The binary contents of the file.
 *                              String 'related_module_id' -- module id to which this note to related to
 *                              String 'related_module_name' - module name to which this note to related to
 *
 * @return Array 'id' -- String - The ID of the Note
 * @exception 'SoapFault' -- The SOAP error, if any
 */
    Method [ undefined<user, inherits SugarWebServiceImpl> public method set_note_attachment ] {
      

      - Parameters [2] {
        Parameter #0 [ undefined<required> $session ]
        Parameter #1 [ undefined<required> $note ]
      }
    }

    /**
 * Retrieve an attachment from a note
 * @param String $session -- Session ID returned by a previous call to login.
 * @param String $id -- The ID of the appropriate Note.
 * @return Array 'note_attachment' -- Array String 'id' -- The ID of the Note containing the attachment
 *                                          String 'filename' -- The file name of the attachment
 *                                          Binary 'file' -- The binary contents of the file.
 *                                          String 'related_module_id' -- module id to which this note is related
 *                                          String 'related_module_name' - module name to which this note is related
 * @exception 'SoapFault' -- The SOAP error, if any
 */
    Method [ undefined<user, inherits SugarWebServiceImpl> public method get_note_attachment ] {
      

      - Parameters [2] {
        Parameter #0 [ undefined<required> $session ]
        Parameter #1 [ undefined<required> $id ]
      }
    }

    /**
 * sets a new revision for this document
 *
 * @param String $session -- Session ID returned by a previous call to login.
 * @param Array $document_revision -- Array String 'id' --  The ID of the document object
 *                                          String 'document_name' - The name of the document
 *                                          String 'revision' - The revision value for this revision
 *                                          String 'filename' -- The file name of the attachment
 *                                          String 'file' -- The binary contents of the file.
 * @return Array - 'id' - String - document revision id
 * @exception 'SoapFault' -- The SOAP error, if any
 */
    Method [ undefined<user, inherits SugarWebServiceImpl> public method set_document_revision ] {
      

      - Parameters [2] {
        Parameter #0 [ undefined<required> $session ]
        Parameter #1 [ undefined<required> $document_revision ]
      }
    }

    /**
 * This method is used as a result of the .htaccess lock down on the cache directory. It will allow a
 * properly authenticated user to download a document that they have proper rights to download.
 *
 * @param String $session -- Session ID returned by a previous call to login.
 * @param String $id      -- ID of the document revision to obtain
 * @return new_return_document_revision - Array String 'id' -- The ID of the document revision containing the attachment
 *                                              String document_name - The name of the document
 *                                              String revision - The revision value for this revision
 *                                              String 'filename' -- The file name of the attachment
 *                                              Binary 'file' -- The binary contents of the file.
 * @exception 'SoapFault' -- The SOAP error, if any
 */
    Method [ undefined<user, inherits SugarWebServiceImpl> public method get_document_revision ] {
      

      - Parameters [2] {
        Parameter #0 [ undefined<required> $session ]
        Parameter #1 [ undefined<required> $id ]
      }
    }

    /**
*   Once we have successfuly done a mail merge on a campaign, we need to notify Sugar of the targets
*   and the campaign_id for tracking purposes
*
* @param String session  -- Session ID returned by a previous call to login.
* @param Array targets   -- a string array of ids identifying the targets used in the merge
* @param String campaign_id  --  the campaign_id used for the merge
* @return - No output
*
* @exception 'SoapFault' -- The SOAP error, if any
*/
    Method [ undefined<user, inherits SugarWebServiceImpl> public method set_campaign_merge ] {
      

      - Parameters [3] {
        Parameter #0 [ undefined<required> $session ]
        Parameter #1 [ undefined<required> $targets ]
        Parameter #2 [ undefined<required> $campaign_id ]
      }
    }

    /**
*   Retrieve number of records in a given module
*
* @param String session      -- Session ID returned by a previous call to login.
* @param String module_name  -- module to retrieve number of records from
* @param String query        -- allows webservice user to provide a WHERE clause
* @param int deleted         -- specify whether or not to include deleted records
*
* @return Array  result_count - integer - Total number of records for a given module and query
* @exception 'SoapFault' -- The SOAP error, if any
*/
    Method [ undefined<user, inherits SugarWebServiceImpl> public method get_entries_count ] {
      

      - Parameters [4] {
        Parameter #0 [ undefined<required> $session ]
        Parameter #1 [ undefined<required> $module_name ]
        Parameter #2 [ undefined<required> $query ]
        Parameter #3 [ undefined<required> $deleted ]
      }
    }
  }
}
